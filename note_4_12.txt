PROCESS API
===========

The fork() System Call
----------------------
  The fork() system call is used to create new system. An example of how fork() works
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv())
{
  printf("hello word (pid:%d)\n", (int) getpid());
  int rc = fork();
  if(rc < 0){           // fork failed; exit
    fprintf(stderr, "fork, failed\n");
    exit(1)
  } else if (rc == 0) { // child (new process)
    printf("hello, I am child (pid: %d)\n", (int) getpid());
  } else {
    printf("hello, I am parent of %d (pid: %d)\n", rc, (int) getpid());
  }
  return 0;
}

EXPECTED OUTPUT:  // may be different
hello world (pid: 29146)
hello, I am parent of 29147 (pid: 29146)
hello, I am child (pid: 29147)

  PID is the process identifier, is the name of process in UNIX system. When the process calls the fork() system all, which the OS provides as a way to create a new process. The process that is created is an (almost) exact copy of the calling process. But the newly-created process doesn't start running at the main() (note that "hello, world" only appears once). The fork() in child just return 0, even though the child has the copy of the address space(?).

  The output is not deterministic. When the child is created, there're two process are active in the system that we care about. The CPU scheduler wiil determin which process runs at a given moment in time.

The wait() System Call
----------------------
  We can use wait() system call to let the parent process wait for a child process

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv())
{
  printf("hello word (pid:%d)\n", (int) getpid());
  int rc = fork();
  if(rc < 0){           // fork failed; exit
    fprintf(stderr, "fork, failed\n");
    exit(1)
  } else if (rc == 0) { // child (new process)
    printf("hello, I am child (pid: %d)\n", (int) getpid());
  } else {              // parent will wait for child process
    int wc = wait(NULL);
    printf("hello, I am parent of %d (wc: %d) (pid: %d)\n", rc, wc, (int) getpid());
  }
  return 0;
}

EXPECTED OUTPUT:  // may be different
hello world (pid: 29146)
hello, I am parent of 29147 (wc: 29146) (pid: 29146)

  In this code, parent calls wait() to delay its execution until the child finishes executing. When the child is done, wait() returns to the parent.

The exec() System Call
----------------------
  exec() is an important process creation API. fork() will let you run a copy of the calling program, while exec() will run let you run a different program. There're six variants of exec().
  
  Note that exec() doesn't create a new process, it transforms the currently running program into a different running program. After the exec() in the child, it is almost as if the original program never run; a successful call to exec() never returns.

  The separation of fork() and exec() is essential in building a UNIX shell, because it lets the shell run code after the call to fork(); this code can alter the environment of the aout-to-be-run program and thus enable a variety of interesting features to be alreadily built.

  The shell is just a user program. It shows you a promt and then waits for you to type something into it. You then type a command. In most cases, the shell then figures out where in the file system the executable resides, calls fork() to create a new child process to run the command, calls some variant of exec() to run the command, and then waits for the command to complete by calling wait(). When the child completes, the shell returns from wait() and prints out a prompt again, ready for your next command.

Example of Shell Command
------------------------
>wc note_4_12.txt > newfile.txt
  In the example above, the output of the program wc is redirected into the output file newfile.txt. When run the program, the shell first use fork() to create a child, before calling exec(), the shell closes STANDARD OUTPUT and opens the newfile.txt, then the output can be sent to the current opened file instead of the screen. The standard output is the monitor screen.

